/* ********************** 
  QUESTION 1

  The function below takes in 2 arguments:  
  - items, an Array of Objects with the fields `name` (a String) and `value` (a Number); 
  - targetName, a String 
  Please rewrite this function so its body fits on a single line.
********************** */
function sumAllElementsByName(items, targetName) {
  let result = 0;
  for (let i = 0; i < items.length; i++) {
    if (items[i].name === targetName) {
      result += items[i].value;
    }
  }
  return result;
}


/* ********************** 
  QUESTION 2

  Please rewrite the function from Question (1) so that, 
  instead of the sum of the `value` fields for items where `name` matches `targetName`, 
  it returns the average of the `value` fields for items where `name` matches `targetName`. 
********************** */


/* ********************** 
  QUESTION 3

  Please write JSDoc-compatible function documentation on the functions you wrote in Questions 1 & 2
********************** */


/* ********************** 
  QUESTION 4

  a) What is wrong in the method `concatenameFields` of class `A` ?  How would you fix it?
  b) Please fix the code in classes `A` and `B` so that testQuestion4() resolves to `true`
  c) Please add JSDoc-compatible documentation to all methods in classes `A` and `B`
********************** */

// This function will have a side effect and return its input
const makeRequest = require('some-request-library');

class A {
  constructor(someField) {
    this._someField = someField;
    this._separator = ' ';
  }

  static concatenameFields(...values) {
    return [this._someField, ...values].join(this._separator);
  }

  async save(items) {
    const values = items.map({ name } => name);
    const finalValue = this.concatenameFields(values);
    const result = await makeRequest(finalValue);
    return `THE RESULT IS: ${result}`;
  }
}

class B extends A {
  constructor() {
    this._separator = '-';
  }

  static concatenameFields(...values) {
    return `[${super.concatenameFields(...values)}]`;
  }
}

async function testQuestion4() {
  const testInput = [
    { name: 'this' },
    { name: 'test' },
    { name: 'is' },
    { name: 'fun' },
  ];

  const a = new A('base A');
  const b = new B('base B');

  const aResult = await a.save(testInput);
  const bResult = await b.save(testInput);

  const aIsOK = aResult === 'THE RESULT IS: this test is fun';
  const bIsOK = bResult === 'THE RESULT IS: [this-test-is-fun]';

  return aIsOK && bIsOK;
}

/* ********************** 
  QUESTION 5 (BONUS! - this one is nice because we use redux-observables and rxjs extensively, but it can be quite tricky if you're not used to them - please tackle last)

  Let's say we have a RESTful API endpoint serving entries from an Items type.
  Each item is structured like so:
  {
    id: String, // unique identifier
    parent: String // id of another Item
  }
  Where Items can have a parent, which can then also have a parent, in a tree-like structure.

  Now, let's say we want to load the entire "parents" history of a given Item, for example:
  { id: 'A', parent: 'B' }
  { id: 'B', parent: 'C' }
  { id: 'C', parent: null }

  So for the item A, we will want to load A, B, and C.

  Below, we have set up a redux store with some redux-observables/rxjs epics to handle actions.

  Please create or modify the epics below so that a simple click on the button in the component, we will load all of the items A, B and C
********************** */

// component
import React from 'react';
import { useSelector, useDispatch } from 'react-redux';

import { makeRequest } from '../store';

const SomeComponent = () => {
  const dispatch = useDispatch();

  const loadData = () => dispatch(makeRequest('A'));
  
  return (
    <div>
      <button onClick={loadData}>Load</button>
    </div>
  )
}

// store
export const MAKE_REQUEST = 'MAKE_REQUEST';
export const MAKE_REQUEST_SUCCESS = 'MAKE_REQUEST_SUCCESS';
export const MAKE_REQUEST_ERROR = 'MAKE_REQUEST_ERROR';

const initialState = {
  items: [],
  error: '',
}

export const const makeRequest = (id) => ({
  type: MAKE_REQUEST,
  payload: id,
});

export const makeRequestSuccess = (data) => ({
  type: MAKE_REQUEST_SUCCESS,
  payload: data,
});

export const makeRequestError = (error) => ({
  type: MAKE_REQUEST_ERROR,
  meta: { error },
});

const reducer = (state = initialState, { type, payload }) => {
  switch (type) {
    case MAKE_REQUEST_SUCCESS:
      return {
        ...state,
        items: [...state.items, payload],
        error: null,
      };
    case MAKE_REQUEST_ERROR:
      return {
        ...state,
        error: 'There was an error in the request',
      };
    default: 
      return state;
  }
};

export default reducer;

// epics
import { ofType, combineEpics } from 'redux-observable';
import {
  map, mapTo, catchError, mergeMap
} from 'rxjs/operators';
import { of } from 'rxjs';
import { ajax } from 'rxjs/ajax';

import {
  MAKE_REQUEST,
  makeRequestSuccess,
  makeRequestError,
} from '../store';

const makeRequest$ = (action$, state$) => action$.pipe(
  ofType(MAKE_REQUEST),
  mergeMap(({ payload: id }) => {
    return ajax(`/api/items/${id}`)
      .pipe(
        map(({ response }) => makeRequestSuccess(data)),
        catchError((error) => of(makeRequestError(error)))
      );
  }),
);

const epics = combineEpics(
  makeRequest$,
);

export default epics;
